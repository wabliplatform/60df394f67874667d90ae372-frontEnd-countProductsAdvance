/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Supplier from '../model/Supplier';

/**
* Supplier service.
* @module api/SupplierApi
* @version 1.0.0
*/
export default class SupplierApi {

    /**
    * Constructs a new SupplierApi. 
    * @alias module:api/SupplierApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createsupplier operation.
     * @callback module:api/SupplierApi~createsupplierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Supplier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Supplier} supplier data to be created
     * @param {module:api/SupplierApi~createsupplierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Supplier}
     */
    createsupplier(supplier, callback) {
      let postBody = supplier;
      // verify the required parameter 'supplier' is set
      if (supplier === undefined || supplier === null) {
        throw new Error("Missing the required parameter 'supplier' when calling createsupplier");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Supplier;
      return this.apiClient.callApi(
        '/supplier', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletesupplier operation.
     * @callback module:api/SupplierApi~deletesupplierCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} supplierId the Id parameter
     * @param {module:api/SupplierApi~deletesupplierCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletesupplier(supplierId, callback) {
      let postBody = null;
      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling deletesupplier");
      }

      let pathParams = {
        'supplierId': supplierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/supplier/{supplierId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllsupplier operation.
     * @callback module:api/SupplierApi~getAllsupplierCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Supplier>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/SupplierApi~getAllsupplierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Supplier>}
     */
    getAllsupplier(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Supplier];
      return this.apiClient.callApi(
        '/supplier/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getsupplier operation.
     * @callback module:api/SupplierApi~getsupplierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Supplier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} supplierId the Id parameter
     * @param {module:api/SupplierApi~getsupplierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Supplier}
     */
    getsupplier(supplierId, callback) {
      let postBody = null;
      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling getsupplier");
      }

      let pathParams = {
        'supplierId': supplierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Supplier;
      return this.apiClient.callApi(
        '/supplier/{supplierId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatesupplier operation.
     * @callback module:api/SupplierApi~updatesupplierCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Supplier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} supplierId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Supplier} opts.supplier data to be updated
     * @param {module:api/SupplierApi~updatesupplierCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Supplier}
     */
    updatesupplier(supplierId, opts, callback) {
      opts = opts || {};
      let postBody = opts['supplier'];
      // verify the required parameter 'supplierId' is set
      if (supplierId === undefined || supplierId === null) {
        throw new Error("Missing the required parameter 'supplierId' when calling updatesupplier");
      }

      let pathParams = {
        'supplierId': supplierId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Supplier;
      return this.apiClient.callApi(
        '/supplier/{supplierId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
